// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wonderr;

#nullable disable

namespace wonderr.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241222063929_MakeDeveloperIdNullable")]
    partial class MakeDeveloperIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("wonderr.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("wonderr.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeliveryDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeveloperId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationAr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationEn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OverviewAr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OverviewEn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("wonderr.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeliveryDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationAr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationEn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LotTypeAr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LotTypeEn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitSize")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("wonderr.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("wonderr.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("wonderr.Project", b =>
                {
                    b.HasOne("wonderr.Developer", null)
                        .WithMany("Projects")
                        .HasForeignKey("DeveloperId");
                });

            modelBuilder.Entity("wonderr.Property", b =>
                {
                    b.HasOne("wonderr.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("wonderr.PropertyImage", b =>
                {
                    b.HasOne("wonderr.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("wonderr.Developer", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("wonderr.Property", b =>
                {
                    b.Navigation("PropertyImages");
                });
#pragma warning restore 612, 618
        }
    }
}
