@page
@model wonderr.Pages.projectsModel
@{
    ViewData["Title"] = @Model.TranslationService.GetTranslation("projects3.hero.dividerIcon");
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="~/css/projects.css" />

<!-- Hero Section -->
<section class="projects-page-hero">
    <div class="projects-page-hero-content">
        <div class="d-flex align-items-center justify-content-center gap-3 mb-4">
            <div class="projects-divider"></div>
            <i class="fas fa-crown projects-icon fs-2"></i>
            <div class="projects-divider"></div>
        </div>
        <h1 class="display-3 fw-bold text-uppercase mb-4">
            @Model.TranslationService.GetTranslation("projects3.hero.title")
        </h1>
        <p class="lead mb-5">
            @Model.TranslationService.GetTranslation("projects3.hero.description")
        </p>

        <div class="row justify-content-center g-3">
            <!-- Premium Locations -->
            <div class="col-4">
                <div class="stat-card">
                    <i class="fas fa-map-marked-alt fs-1 mb-3"></i>
                    <h3 class="stat-number mb-2">
                        @Model.TranslationService.GetTranslation("projects3.hero.stats.locations.number")
                    </h3>
                    <p class="stat-label mb-0">
                        @Model.TranslationService.GetTranslation("projects3.hero.stats.locations.label")
                    </p>
                </div>
            </div>

            <!-- Elite Developers -->
            <div class="col-4">
                <div class="stat-card">
                    <i class="fas fa-building fs-1 mb-3"></i>
                    <h3 class="stat-number mb-2">
                        @Model.TranslationService.GetTranslation("projects3.hero.stats.developers.number")
                    </h3>
                    <p class="stat-label mb-0">
                        @Model.TranslationService.GetTranslation("projects3.hero.stats.developers.label")
                    </p>
                </div>
            </div>

            <!-- Luxury Projects -->
            <div class="col-4">
                <div class="stat-card">
                    <i class="fas fa-home fs-1 mb-3"></i>
                    <h3 class="stat-number mb-2">
                        @Model.TranslationService.GetTranslation("projects3.hero.stats.projects.number")
                    </h3>
                    <p class="stat-label mb-0" style="white-space: nowrap;">
                        @Model.TranslationService.GetTranslation("projects3.hero.stats.projects.label")
                    </p>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Filter Section -->
<section class="projects-filter py-4">
    <div class="container">
        <div class="filter-container bg-white rounded-4 shadow-lg p-4">
            <div class="row g-3">
                <div class="col-md-4">
                    <select class="form-select" id="locationFilter" data-filter="location">
                        <option value="">
                            @Model.TranslationService.GetTranslation("projects3.filter.allLocations")
                        </option>
                        @foreach (var location in Model.Projects.Select(p => p.LocationEn).Distinct())
                        {
                            <option value="@location">@location</option>
                        }
                    </select>
                </div>
                <div class="col-md-4">
                    <select class="form-select" id="typeFilter" data-filter="type">
                        <option value="">
                            @Model.TranslationService.GetTranslation("projects3.filter.allTypes")
                        </option>
                        @foreach (var type in Model.Properties.Select(p => p.LotTypeEn).Distinct())
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>
                <div class="col-md-4">
                    <select class="form-select" id="developerFilter" data-filter="developer">
                        <option value="">
                            @Model.TranslationService.GetTranslation("projects3.filter.allDevelopers")
                        </option>
                    </select>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Enhanced Projects Showcase -->
<section class="projects-showcase py-5">
    <div class="container">
        <div class="row g-4">
            @foreach (var project in Model.Projects)
            {
                <div class="col-lg-4 col-md-6">
                    <div class="card h-100 shadow-hover border-0">
                        <div class="image-wrapper position-relative overflow-hidden">
                            <img src="@project.Image" class="card-img-top" alt="@project.NameEn">
                            <div class="price-badge">
                                <span class="h6 mb-0">
                                    @Model.TranslationService.GetTranslation("projects3.showcase.priceBadgePrefix")
                                    @project.Price.ToString("C0")
                                </span>
                            </div>
                        </div>

                        <div class="card-body p-4">
                            <h4 class="card-title mb-3">@project.NameEn</h4>
                            <div class="d-flex align-items-center gap-2 mb-3">
                                <i class="fas fa-map-marker-alt text-gold"></i>
                                <span class="text-muted">@project.LocationEn</span>
                                <i class="fas fa-home text-gold ms-3"></i>
                                <span class="text-muted">Residential</span>
                            </div>
                            <a href="/PL/@project.Id" class="btn btn-outline-black w-100 mt-1" style="color:black;">
                                @Model.TranslationService.GetTranslation("projects3.showcase.viewDetails")
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const locationFilter = document.getElementById("locationFilter");
            const typeFilter = document.getElementById("typeFilter");
            const developerFilter = document.getElementById("developerFilter");
            const projectCards = document.querySelectorAll(".projects-showcase .card");

            // Attach data attributes to each project card for filtering
            projectCards.forEach(card => {
                const title = card.querySelector(".card-title").innerText.trim();
                const location = card.querySelector(".text-muted")?.innerText.trim() || "";
                const type = card.querySelector(".text-muted:last-of-type")?.innerText.trim() || "";
                const developer = title.split(" ")[0]; // fallback, replace with actual developer if available

                card.setAttribute("data-location", location);
                card.setAttribute("data-type", type);
                card.setAttribute("data-developer", developer); // you can bind this better in C# side
            });

            // Core filter function
            function applyFilters() {
                const selectedLocation = locationFilter.value.toLowerCase();
                const selectedType = typeFilter.value.toLowerCase();
                const selectedDeveloper = developerFilter.value.toLowerCase();

                projectCards.forEach(card => {
                    const loc = card.getAttribute("data-location").toLowerCase();
                    const type = card.getAttribute("data-type").toLowerCase();
                    const dev = card.getAttribute("data-developer").toLowerCase();

                    const matchLocation = !selectedLocation || loc === selectedLocation;
                    const matchType = !selectedType || type === selectedType;
                    const matchDeveloper = !selectedDeveloper || dev === selectedDeveloper;

                    if (matchLocation && matchType && matchDeveloper) {
                        card.closest(".col-lg-4, .col-md-6").style.display = "block";
                    } else {
                        card.closest(".col-lg-4, .col-md-6").style.display = "none";
                    }
                });
            }

            locationFilter.addEventListener("change", applyFilters);
            typeFilter.addEventListener("change", applyFilters);
            developerFilter.addEventListener("change", applyFilters);
        });
    </script>
}
